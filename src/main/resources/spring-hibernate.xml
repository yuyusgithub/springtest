<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx.xsd
                        http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop.xsd
						">

    <context:property-placeholder location="classpath:config-hibernate.properties,classpath:config-jdbc.properties"/>

    <!--配置C3P0连接池 bean-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
          destroy-method="close">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 请求超时时间 -->
        <property name="checkoutTimeout" value="30000"/>
        <!-- 每60秒检查所有连接池中的空闲连接。默认值: 0，不检查 -->
        <property name="idleConnectionTestPeriod" value="30"/>
        <!-- 连接数据库连接池最大空闲时间 -->
        <property name="maxIdleTime" value="30"/>
        <!-- 连接池初始化连接数 -->
        <property name="initialPoolSize" value="5"/>
        <property name="minPoolSize" value="5"/>
        <property name="maxPoolSize" value="20"/>
        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。默认值: 3 -->
        <property name="acquireIncrement" value="5"/>
    </bean>

    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="hibernateProperties">
            <props>
                <!-- 配置不同数据库的方言 -->
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <!-- 其实这个参数的作用主要用于：自动创建|更新|验证数据库表结构。如果不是此方面的需求建议set value="none". 其它几个参数的意思，我解释一下：
                    validate 加载hibernate时，验证创建数据库表结构 create 每次加载hibernate，重新创建数据库表结构，这就是导致数据库表数据丢失的原因。
                    create-drop 加载hibernate时创建，退出是删除表结构 update 加载hibernate自动更新数据库结构 -->
                <prop key="hibernate.hbm2ddl.auto">none</prop>
                <!-- 是否显示sql语句 -->
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>

            </props>
        </property>

        <property name="mappingResources">
            <list>
                <value>com/bean/Student.hbm.xml</value>
                <value>com/bean/Teacher.hbm.xml</value>
            </list>
        </property>

    </bean>

    <tx:annotation-driven/>
    <!-- transaction manager -->
    <bean name="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>

    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="append*" propagation="REQUIRED"/>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="modify*" propagation="REQUIRED"/>
            <tx:method name="edit*" propagation="REQUIRED"/>
            <tx:method name="saveOrUpdate*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED" read-only="false"/>

            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="load*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="search*" propagation="SUPPORTS" read-only="true"/>

            <!-- 其他采用默认事务方式 -->
            <tx:method name="*" propagation="REQUIRED" />

        </tx:attributes>
        <!--PROPAGATION_REQUIRED-->
        <!--如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择。-->
        <!--PROPAGATION_SUPPORTS-->
        <!--支持当前事务，如果当前没有事务，就以非事务方式执行。-->
        <!--PROPAGATION_MANDATORY-->
        <!--使用当前的事务，如果当前没有事务，就抛出异常。-->
        <!--PROPAGATION_REQUIRES_NEW-->
        <!--新建事务，如果当前存在事务，把当前事务挂起。-->
        <!--PROPAGATION_NOT_SUPPORTED-->
        <!--以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。-->
        <!--PROPAGATION_NEVER-->
        <!--以非事务方式执行，如果当前存在事务，则抛出异常。-->
        <!--PROPAGATION_NESTED-->
        <!--如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。-->
    </tx:advice>
    <aop:config>
        <aop:pointcut id="transactionPointcut" expression="execution(* com.service..*Impl.*(..))"/>
        <aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice"/>
    </aop:config>


</beans>